
1. In your own words, explain what clean code is and why it is important.
   ANS.
     Whilst the main objective of writing codes is to solve problems, the code
     much better when it is written clean. Clean coding is basically the use of 
     certain principles to make a written code look much more simple, readable,
     and easy to maintain.
     This becomes very important when you work with others on large-scale and complex 
     applications. Making it simple, easy to read means any team member can continue
     your work or even fix it should a problem arise in your absence.
   

2  Read this article about Toyota and their use of bad code. Although you may not yet 
   understand all of the topics discussed, think about another commonly used object that 
   relies on computers 
   and explain what would happen if the code was not created to an acceptable standard.
   ANS.
     the ECG machine measures the electrical activity of your heart to show whether or 
     not it is working normally. If the codes that helps display the results are not 
     written to standard, could be a life or death situation for the patients since this
     will lead to bad diagnosis by the doctor which could lead to death

3. Would you consider the following to be clean code? 
   Explain why or why not. If not, refactor the code.

  javascript
        FUNCTION do(x, y)               // Creating a new function
         IF y = "F" THEN               // Check if y is equal "F"
         SET z to (x-32) * (5/9)       // Formula to convert degrees fahrenheit to celsius
         PRINT z                       // Print result
         ELSE IF y = "C" THEN          // If y not equal to "F", check if equal to "C"
         SET z to x * 1.8000 + 32.00   // Formula to convert degrees celsius to fahrenheit
         PRINT z                       // Print result
         END IF
        END FUNCTION
  

ANS
    NO, i will not consider this a clean code. For the following reasons
    1. The function name does not reflect the purpose of the function
    2. The given parameters dont help us understand what values are required
       as arguments.
    3. The code is riddled with too many comments
    4. The indentications are not well done so its quiet confusing 

    javascript 
       FUNCTION convertTemperature(num,unit)             
         IF unit = "F" THEN               
           SET temperature to (num - 32) * (5/9)       
           PRINT temperature                      
         ELSE IF unit = "C" THEN         
           SET temperature to num * 1.8000 + 32.00  
           PRINT temperature                       
         END IF
       END FUNCTION


4.  Would you consider the following to be clean code? 
    Explain why or why not. If not, refactor the code.

    FUNCTION calcPercent(sum, total)
      IF NOT(total = 0) THEN
        SET percentage to sum / total * 100
      ELSE
        PRINT "Sorry, cannot divide by 0"
      END IF

        PRINT percentage
    END FUNCTION
    
ANS.
   NO, there are quiet some issues with the code which makes it not to stand 
   out as a clean code
   1. The function name should not be abbreviated, it show have full name
      spelt right
  

      FUNCTION calculatePercentage(sum, total)
         IF NOT(total = 0) THEN
           SET percentage to sum / total * 100
         ELSE
           PRINT "Sorry, cannot divide by 0"
         END IF

        PRINT percentage
      END FUNCTION

5a. Based on the Squint test, the word 'THEN' is not highlighted
    well to show its true pattern

    FUNCTION checkOutCustomer(subTotal, discountRate, paymentType)
      PRINT "Your total due is: " + subTotal * discountRate + (subTotal * tax)

      IF paymentType = 'CASH' THEN
        CALL getPayment RETURNING amount
        PRINT "Change due: " + amount - subTotal * discountRate + (subTotal * tax)
      ELSE IF paymentType = 'CREDIT CARD' THEN
        CALL getPayment RETURNING amount
        PRINT "Your credit card has been charged: " + subTotal * discountRate + (subTotal * tax)
      END IF
    END FUNCTION


5b. Based on the Nest appropriation principle, the function is nested too
    deep.

    FUNCTION checkoutBook(book, guest)
      IF guest.accountActive AND  NOT(guest.hasOverdueBooks) AND guest.outstandingFees = 0 THEN
         APPEND book to guest.books
         SET book.status to "Checked Out"
         PRINT "Your books have been issued."
      ELSE
         PRINT "Unable to check out book."
      END IF
    END FUNCTION

5c. Based on the Single Responsibility Principle, which explains that every
    class and function should have one responsibilty. This class can be divided
    into seperate classes


    CLASS BankAccount

      FUNCTION displayBalance
        PRINT balance
      END FUNCTION

      FUNCTION deposit(amount)
        SET balance to balance + amount
      END FUNCTION

      FUNCTION withdraw(amount)
        IF balance > amount THEN
           SET balance to balance - amount
        END
      END FUNCTION

    END CLASS



    CLASS 

      FUNCTION creditCardOffer
        IF NOT(customer.hasCreditCard) THEN
          CALL offerCreditCard
        END IF
      END FUNCTION
    
    END CLASS



    CLASS

      FUNCTION checkStatus
        IF NOT(customer.hasCheckingAccount) THEN
          CALL offerCheckingAccount
        END IF
      END FUNCTION
   
    END CLASS


7.  Duplicate Given an array of integers, find out whether the array contains 
    any duplicate elements. The function should return true if any value appears 
    at least twice in the array, 
    and false if every element is distinct.
  ANS

   function isDuplicate(arr){
        let count = [];
        for(var i = 0;i <= arr.length; i++){
           if(count[arr[i]] === undefined){
              count[arr[i]] = 1;
       } else {
              return true;
        }
     } 
         return false;
   }

   console.log(isDuplicate([2,4,5,6,2]));


    









